
STM32_Register_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000588  08000590  00001590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000588  08000588  00001590  2**0
                  CONTENTS
  4 .ARM          00000000  08000588  08000588  00001590  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000588  08000590  00001590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000588  08000588  00001588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800058c  0800058c  0000158c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000590  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000590  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f0a  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ba  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00002988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ba  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df42  00000000  00000000  00002b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000176a  00000000  00000000  00010a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050370  00000000  00000000  00012206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00062576  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002cc  00000000  00000000  000625bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00062888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000570 	.word	0x08000570

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000570 	.word	0x08000570

080001d8 <LED_LD2_Init>:
// LED2 LD2 on PA5
// 1 - On
// 0 - Off

void LED_LD2_Init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// LD2 on PA5
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	@ (800020c <LED_LD2_Init+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	@ (800020c <LED_LD2_Init+0x34>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30

//    // Ustaw PA5 jako wyjście
//    GPIOA->MODER &= ~(GPIO_MODER_MODE5); // Wyzeruj bity MODER5[1:0]
//    GPIOA->MODER |= GPIO_MODER_MODE5_0;  // Ustaw tryb wyjścia (01)

	GPIOA->MODER &= ~(GPIO_MODER_MODE5);
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <LED_LD2_Init+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	@ (8000210 <LED_LD2_Init+0x38>)
 80001ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 80001f4:	4b06      	ldr	r3, [pc, #24]	@ (8000210 <LED_LD2_Init+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	@ (8000210 <LED_LD2_Init+0x38>)
 80001fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fe:	6013      	str	r3, [r2, #0]
//	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5); // After reset is ok

//	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);

//	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <LED_LD2_Toggle>:
//	GPIOA->ODR |= ~(GPIO_ODR_OD5);
	GPIOA->BSRR = GPIO_BSRR_BR5;
}

__attribute__((always_inline)) inline void LED_LD2_Toggle(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_OD5;
 8000218:	4b05      	ldr	r3, [pc, #20]	@ (8000230 <LED_LD2_Toggle+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	@ (8000230 <LED_LD2_Toggle+0x1c>)
 800021e:	f083 0320 	eor.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000

08000234 <main>:
SoftTimer_t TimerLD2;

void TaskLD2(void);

int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	SystemClockHSI16();
 8000238:	f000 f928 	bl	800048c <SystemClockHSI16>

	LED_LD2_Init();
 800023c:	f7ff ffcc 	bl	80001d8 <LED_LD2_Init>

	SoftTimerAction(&TimerLD2, TaskLD2);
 8000240:	4906      	ldr	r1, [pc, #24]	@ (800025c <main+0x28>)
 8000242:	4807      	ldr	r0, [pc, #28]	@ (8000260 <main+0x2c>)
 8000244:	f000 f836 	bl	80002b4 <SoftTimerAction>
	SoftTimerStart(&TimerLD2, 500);
 8000248:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <main+0x2c>)
 800024e:	f000 f83f 	bl	80002d0 <SoftTimerStart>

    /* Loop forever */
	while(1)
	{

		SoftTimerEvent(&TimerLD2);
 8000252:	4803      	ldr	r0, [pc, #12]	@ (8000260 <main+0x2c>)
 8000254:	f000 f80c 	bl	8000270 <SoftTimerEvent>
 8000258:	e7fb      	b.n	8000252 <main+0x1e>
 800025a:	bf00      	nop
 800025c:	08000265 	.word	0x08000265
 8000260:	2000001c 	.word	0x2000001c

08000264 <TaskLD2>:

	}
}

void TaskLD2(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	LED_LD2_Toggle();
 8000268:	f7ff ffd4 	bl	8000214 <LED_LD2_Toggle>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <SoftTimerEvent>:
#include "main.h"
#include "sys_clocks.h"
#include "software_timers.h"

void SoftTimerEvent(SoftTimer_t *Timer)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if((GetSystemTick() - Timer->LastTick) > Timer->TimeToDelay)
 8000278:	f000 f920 	bl	80004bc <GetSystemTick>
 800027c:	4602      	mov	r2, r0
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	1ad2      	subs	r2, r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d90f      	bls.n	80002ac <SoftTimerEvent+0x3c>
	{
			if(Timer->TimeToDelay)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00b      	beq.n	80002ac <SoftTimerEvent+0x3c>
			{
				Timer->LastTick = GetSystemTick();
 8000294:	f000 f912 	bl	80004bc <GetSystemTick>
 8000298:	4602      	mov	r2, r0
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	605a      	str	r2, [r3, #4]
				if(Timer->Action)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d002      	beq.n	80002ac <SoftTimerEvent+0x3c>
				{
					Timer->Action();
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	4798      	blx	r3
				}
			}
	}
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <SoftTimerAction>:

void SoftTimerAction(SoftTimer_t *Timer, void (*_Action)(void))
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	Timer->Action = _Action;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	609a      	str	r2, [r3, #8]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <SoftTimerStart>:

void SoftTimerStart(SoftTimer_t *Timer, uint32_t Delay)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	if(Delay != 0)
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d007      	beq.n	80002f0 <SoftTimerStart+0x20>
	{
		Timer->TimeToDelay = Delay;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	601a      	str	r2, [r3, #0]
		Timer->LastTick = GetSystemTick();
 80002e6:	f000 f8e9 	bl	80004bc <GetSystemTick>
 80002ea:	4602      	mov	r2, r0
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	605a      	str	r2, [r3, #4]
	}
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	db0a      	blt.n	8000322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	@ (8000344 <__NVIC_SetPriority+0x4c>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	0112      	lsls	r2, r2, #4
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	440b      	add	r3, r1
 800031c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000320:	e00a      	b.n	8000338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4908      	ldr	r1, [pc, #32]	@ (8000348 <__NVIC_SetPriority+0x50>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	3b04      	subs	r3, #4
 8000330:	0112      	lsls	r2, r2, #4
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	440b      	add	r3, r1
 8000336:	761a      	strb	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3b01      	subs	r3, #1
 8000358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800035c:	d301      	bcc.n	8000362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800035e:	2301      	movs	r3, #1
 8000360:	e00f      	b.n	8000382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <SysTick_Config+0x40>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036a:	210f      	movs	r1, #15
 800036c:	f04f 30ff 	mov.w	r0, #4294967295
 8000370:	f7ff ffc2 	bl	80002f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <SysTick_Config+0x40>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037a:	4b04      	ldr	r3, [pc, #16]	@ (800038c <SysTick_Config+0x40>)
 800037c:	2207      	movs	r2, #7
 800037e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	e000e010 	.word	0xe000e010

08000390 <SystemClockPLL48>:


}

void SystemClockPLL48(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

// HSE On
	    RCC->CR |= RCC_CR_HSEON;
 8000394:	4b3a      	ldr	r3, [pc, #232]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a39      	ldr	r2, [pc, #228]	@ (8000480 <SystemClockPLL48+0xf0>)
 800039a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800039e:	6013      	str	r3, [r2, #0]

// Wait for HSE
	    while (!(RCC->CR & RCC_CR_HSERDY));
 80003a0:	bf00      	nop
 80003a2:	4b37      	ldr	r3, [pc, #220]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f9      	beq.n	80003a2 <SystemClockPLL48+0x12>

// HSE as PLL Source
	    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80003ae:	4b34      	ldr	r3, [pc, #208]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	4a33      	ldr	r2, [pc, #204]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003b4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80003b8:	6053      	str	r3, [r2, #4]
	    RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 80003ba:	4b31      	ldr	r3, [pc, #196]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	4a30      	ldr	r2, [pc, #192]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003c4:	6053      	str	r3, [r2, #4]

// FLASH: 1 wait states for 48 MHz
	    FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80003c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000484 <SystemClockPLL48+0xf4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a2e      	ldr	r2, [pc, #184]	@ (8000484 <SystemClockPLL48+0xf4>)
 80003cc:	f023 0307 	bic.w	r3, r3, #7
 80003d0:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80003d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <SystemClockPLL48+0xf4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000484 <SystemClockPLL48+0xf4>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6013      	str	r3, [r2, #0]

// Dividers PLL
	    RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP);
 80003de:	4b28      	ldr	r3, [pc, #160]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003e0:	685a      	ldr	r2, [r3, #4]
 80003e2:	4927      	ldr	r1, [pc, #156]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <SystemClockPLL48+0xf8>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	604b      	str	r3, [r1, #4]

	    RCC->PLLCFGR |= (4 << RCC_PLLCFGR_PLLM_Pos); // PLLM = 4
 80003ea:	4b25      	ldr	r3, [pc, #148]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6053      	str	r3, [r2, #4]
	    RCC->PLLCFGR |= (96 << RCC_PLLCFGR_PLLN_Pos); // PLLN = 96
 80003f6:	4b22      	ldr	r3, [pc, #136]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	4a21      	ldr	r2, [pc, #132]	@ (8000480 <SystemClockPLL48+0xf0>)
 80003fc:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8000400:	6053      	str	r3, [r2, #4]
	    RCC->PLLCFGR |= (0 << RCC_PLLCFGR_PLLP_Pos); // PLLP = 2
 8000402:	4b1f      	ldr	r3, [pc, #124]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000404:	4a1e      	ldr	r2, [pc, #120]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	6053      	str	r3, [r2, #4]


// PLL ENABLE
	    RCC->CR |= RCC_CR_PLLON;
 800040a:	4b1d      	ldr	r3, [pc, #116]	@ (8000480 <SystemClockPLL48+0xf0>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a1c      	ldr	r2, [pc, #112]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000414:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY)); // Poczekaj, aż PLL będzie gotowe
 8000416:	bf00      	nop
 8000418:	4b19      	ldr	r3, [pc, #100]	@ (8000480 <SystemClockPLL48+0xf0>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f9      	beq.n	8000418 <SystemClockPLL48+0x88>

	    RCC->CFGR &= ~(RCC_CFGR_HPRE);
 8000424:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4a15      	ldr	r2, [pc, #84]	@ (8000480 <SystemClockPLL48+0xf0>)
 800042a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800042e:	6093      	str	r3, [r2, #8]
	    RCC->CFGR |=  RCC_CFGR_HPRE_DIV2;
 8000430:	4b13      	ldr	r3, [pc, #76]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800043a:	6093      	str	r3, [r2, #8]
	    RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800043c:	4b10      	ldr	r3, [pc, #64]	@ (8000480 <SystemClockPLL48+0xf0>)
 800043e:	4a10      	ldr	r2, [pc, #64]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	6093      	str	r3, [r2, #8]
	    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000444:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000446:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	6093      	str	r3, [r2, #8]

// Set PLL
	    RCC->CFGR &= ~(RCC_CFGR_SW);        // Wyzeruj pole SW[1:0]
 800044c:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <SystemClockPLL48+0xf0>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	4a0b      	ldr	r2, [pc, #44]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000452:	f023 0303 	bic.w	r3, r3, #3
 8000456:	6093      	str	r3, [r2, #8]
	    RCC->CFGR |= RCC_CFGR_SW_PLL;       // Ustaw SW[1:0] na 01 (PLL)
 8000458:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <SystemClockPLL48+0xf0>)
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4a08      	ldr	r2, [pc, #32]	@ (8000480 <SystemClockPLL48+0xf0>)
 800045e:	f043 0302 	orr.w	r3, r3, #2
 8000462:	6093      	str	r3, [r2, #8]

// Wait for PLL
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000464:	bf00      	nop
 8000466:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <SystemClockPLL48+0xf0>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f003 030c 	and.w	r3, r3, #12
 800046e:	2b08      	cmp	r3, #8
 8000470:	d1f9      	bne.n	8000466 <SystemClockPLL48+0xd6>

}
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800
 8000484:	40023c00 	.word	0x40023c00
 8000488:	fffc8000 	.word	0xfffc8000

0800048c <SystemClockHSI16>:


void SystemClockHSI16(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

//	SystemClockHSE8();
	SystemClockPLL48();
 8000490:	f7ff ff7e 	bl	8000390 <SystemClockPLL48>

	SysTick_Config(48000000 / 1000);
 8000494:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8000498:	f7ff ff58 	bl	800034c <SysTick_Config>

}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	Tick++;
 80004a4:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <SysTick_Handler+0x18>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	4a03      	ldr	r2, [pc, #12]	@ (80004b8 <SysTick_Handler+0x18>)
 80004ac:	6013      	str	r3, [r2, #0]
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	20000028 	.word	0x20000028

080004bc <GetSystemTick>:

uint32_t GetSystemTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	return Tick;
 80004c0:	4b03      	ldr	r3, [pc, #12]	@ (80004d0 <GetSystemTick+0x14>)
 80004c2:	681b      	ldr	r3, [r3, #0]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000028 	.word	0x20000028

080004d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d4:	480d      	ldr	r0, [pc, #52]	@ (800050c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
   bl  SystemInit
 80004d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480c      	ldr	r0, [pc, #48]	@ (8000510 <LoopForever+0x6>)
  ldr r1, =_edata
 80004de:	490d      	ldr	r1, [pc, #52]	@ (8000514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000518 <LoopForever+0xe>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000520 <LoopForever+0x16>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000502:	f000 f811 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fe95 	bl	8000234 <main>

0800050a <LoopForever>:

LoopForever:
  b LoopForever
 800050a:	e7fe      	b.n	800050a <LoopForever>
  ldr   r0, =_estack
 800050c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000518:	08000590 	.word	0x08000590
  ldr r2, =_sbss
 800051c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000520:	2000002c 	.word	0x2000002c

08000524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC_IRQHandler>
	...

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	4d0d      	ldr	r5, [pc, #52]	@ (8000560 <__libc_init_array+0x38>)
 800052c:	4c0d      	ldr	r4, [pc, #52]	@ (8000564 <__libc_init_array+0x3c>)
 800052e:	1b64      	subs	r4, r4, r5
 8000530:	10a4      	asrs	r4, r4, #2
 8000532:	2600      	movs	r6, #0
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	4d0b      	ldr	r5, [pc, #44]	@ (8000568 <__libc_init_array+0x40>)
 800053a:	4c0c      	ldr	r4, [pc, #48]	@ (800056c <__libc_init_array+0x44>)
 800053c:	f000 f818 	bl	8000570 <_init>
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	10a4      	asrs	r4, r4, #2
 8000544:	2600      	movs	r6, #0
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f855 3b04 	ldr.w	r3, [r5], #4
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08000588 	.word	0x08000588
 8000564:	08000588 	.word	0x08000588
 8000568:	08000588 	.word	0x08000588
 800056c:	0800058c 	.word	0x0800058c

08000570 <_init>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr

0800057c <_fini>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr
